



Transport Layer Security                                      M. Thomson
Internet-Draft                                                   Mozilla
Intended status: Standards Track                        18 November 2024
Expires: 22 May 2025


         Public Name Masquerade for TLS Encrypted Client Hello
                  draft-thomson-tls-ech-pnmasq-latest

Abstract

   TODO Abstract

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://martinthomson.github.io/retch-sik/draft-thomson-tls-retch-
   sik.html.  Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-thomson-tls-ech-pnmasq/.

   Discussion of this document takes place on the Transport Layer
   Security Working Group mailing list (mailto:tls@ietf.org), which is
   archived at https://mailarchive.ietf.org/arch/browse/tls/.  Subscribe
   at https://www.ietf.org/mailman/listinfo/tls/.

   Source for this draft and an issue tracker can be found at
   https://github.com/martinthomson/retch-sik.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 22 May 2025.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
     1.1.  Unique Public Names
     1.2.  Recovery of Anonymity Sets
     1.3.  Alternative Authentication for Public Names
   2.  Conventions and Definitions
   3.  Alternative Retry Authentication
   4.  ECH Public Name Masquerade Extension
   5.  Retry Configuration Authentication
   6.  Deployment Considerations
     6.1.  Key Lifetime
     6.2.  Unique Name Mappings
   7.  Security Considerations
   8.  IANA Considerations
   9.  References
     9.1.  Normative References
     9.2.  Informative References
   Acknowledgments
   Author's Address

1.  Introduction

   The TLS Encrypted Client Hello (ECH) [ECH] defines a fallback
   mechanism that is used when a client attempts to use outdated or
   incorrect configuration.

   This recovery is an essential feature of ECH, but it can contribute
   to a reduction in the size of the anonymity set of server identities.
   A reduction occurs when a service needs to use the different public
   name values.  The public name is chosen for the server deployment
   that clients put in the unprotected "server_name" extension.  A
   server deployment might rely on the public name to route incoming
   connections or select from different ECH configurations.

   The natural way to improve privacy in this setting is to maximize the
   uniformity of information that is revealed to adversaries.  For
   privacy purposes, an ideal arrangement uses a single consistent
   configuration across all clients.  However, as the anonymity set that
   results depends on IP address, public name, and other configuration
   parameters, perfect uniformity is essentially impossible to achieve.

   Each server operator might seek to ensure that it uses the minimum
   possible number of configurations to maximize the effective gprivacy.
   However, this can be at odds with operational constraints that might
   push toward having more diverse configurations.

1.1.  Unique Public Names

   This document describes an approach that seeks to improve privacy by
   increasing the number of public names.  Rather than having as few
   public names as possible, it increases the size of the anonymity set
   for public names by using as many public names as possible.

   In the ideal form of this approach, a unique public name is used for
   each client.  In practice, caching of HTTPS records [RFC9460] will
   ensure that the same public name is likely to be used by some number
   of clients.

   Any reuse of a name will cluster clients into relatively small
   anonymity sets.  Any clustering will be based on attributes that
   already leak to a passive observer.  This includes the time, the
   network that a client uses, or the choice of DNS resolver.

   The net effect is that the public name is either unique (used for a
   single connection) or forms a small anonymity set (used for a small
   number of connections).  Assembling observed connection attempts into
   group that represents the true anonymity set requires that an
   adversary obtain mappings for all of the public names that correspond
   to the same hidden names.

   The net effect is similar to publishing multiple different
   encryptions of public names.  This increased diversity of public
   names leads to a much larger effective anonymity set, except to the
   extent that adversaries are able to recover the mapping of each
   public name to hidden names.  Both the public name and other ECH
   configuration values, such as HPKE [RFC9180] parameters, are
   effectively obscured.  However, this approach cannot hide the use of
   IP addresses that correspond to a set of hidden names.

1.2.  Recovery of Anonymity Sets

   This design only permits linking public names based on what an
   adversary can observe about the relation between each hidden name and
   all of the public names that are used for that each hidden name.

   Obviously, the reuse of a name would reveal that two identical names
   share a configuration.  The use of ECH still means that uses of those
   public names could correspond to different hidden names.

   To provide a comprehensible view of the true anonymity set, an
   adversary would need to obtain all public names that are in use
   across all hidden names.  If different names are provided in response
   to every DNS query from an authoritative resolver, an adversary would
   -- at best -- need to query every DNS resolver cache that queries
   that authoritative.  This makes it far more difficult to get a
   precise enumeration of the names that correspond to any given
   anonymity set.

1.3.  Alternative Authentication for Public Names

   This document defines a new method for validating the certificate
   that a server proffers during an ECH retry.  This enables a retry
   process that does not depend on the public key infrastructure that is
   used for server authentication, making it far easier to create new
   public names.

   These names can even overlap with parts of the domain name system.
   The client determines whether a server is authorized to provide an
   ECH retry configuration based on the choice of name alone.  This
   removes any need to rely on anything other than the public key that
   is bound to the name.  This obviates any need for revocation checks,

   This change to public name authentication is the only aspect of this
   document that requires client changes.  This document describes a
   server architecture that helps demonstrate the feasibility of this
   approach, including an analysis of drawbacks.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Alternative Retry Authentication

   ECH defines a retry process for when the ECH configuration that a
   client uses is rejected by a server.  The server completes the
   handshake using the outer (or unprotected) ClientHello.

   By default, the server offers a certificate that is valid for the
   outer "server_name" that is used.  The client then authenticates the
   handshake using that certificate and the process by which a client
   would ordinarily validate a server identity.

   That ordinary process relies on the client having previously
   established which name it wishes to authenticate.  The name that is
   used during an ECH retry comes from the ECH configuration.  The ECH
   configuration is typically obtained from the SVCB record [SVCB],
   which ECH treats as unauthenticated; see Section 10.2 of [ECH].

   The client therefore relies on the ECH configuration to choose the
   public name that it authenticates.  This opens the possibility that
   the ECH configuration can also specify alternative means of
   authentication.

   The public name therefore does not need to be valid according to
   ordinary client expectations.  The public name exists solely to carry
   information to the server about the anonymity set into which the
   connection attempt falls.  The public name value could even be
   encrypted; see Section 6.

   This document defines an ECH configuration extension,
   "public_name_authn", that specifies an alternative name and the means
   by which that alternative name is authenticated.

4.  ECH Public Name Masquerade Extension

   An extension is defined for ECH that includes a randomized name and
   information necessary to authenticate the TLS handshake that supplies
   an ECH retry configuration.

   struct {
     SignatureScheme scheme;
     opaque spki_hash[32];
   } PublicNameAuthentication;

              Figure 1: public_name_authn Extension Structure

   This extension is defined as mandatory, because a server that uses
   this approach relies on clients applying the alternative
   authentication method to validate the public name.

   Clients MUST NOT use an ECH configuration with this extension unless
   the connection they establish includes the indicated signature scheme
   in a "signature_algorithms" extension.

      |  This might be marginally more compatible if the extension were
      |  optional.  In that case, the extension would have to include
      |  the bogus public name as well, which would be less efficient in
      |  the longer term.
      |  
      |  In the short term, this approach is less efficient as it forces
      |  a server that wishes to support clients that do not support
      |  this extension to provide additional configurations.

5.  Retry Configuration Authentication

   A server that rejects an ECH configuration can use a certificate or
   raw public key [RAW].  Clients extract the subjectPublicKeyInfo,
   either from the certificate or, for raw public keys, the Certificate
   message content.

   The resulting subjectPublicKeyInfo structure is hashed using SHA-256
   and compared to the spki_hash value from the "public_name_authn"
   extension in the ECH configuration.  If the value matches, the retry
   configuration is accepted.  Otherwise, the connection attempt MUST be
   aborted and any retry configuration that is provided is discarded.

   This procedure largely replaces the procedure in Section 6.1.7 of
   [ECH].  This does not change the requirement that the client not
   provide a certificate if requested or regard the connection as
   authenticated for the origin.

6.  Deployment Considerations

6.1.  Key Lifetime

   If public names are encrypted, the lifetime of any keys that are used
   needs to exceed the lifetime of ECH keys.  Otherwise, servers will be
   unable to recover when clients use old ECH configurations.

   The keys used to protect public names only exist to protect the
   extent of the anonymity set.  These keys can be rotated less often
   than the keys that are used to protect hidden names.

6.2.  Unique Name Mappings

7.  Security Considerations

   The use of a unique public name could identify the hidden name.  If
   each hidden name corresponds to a different public name, an adversary
   that is able to obtain that mapping might reverse the mapping to
   recover the hidden name from the unprotected "server_name" extension.
   This attack is addressed in Section 6.2.

8.  IANA Considerations

   This document registers an extension in the TLS "ECH Configuration
   Extension Registry" established by [ECH].

   Value:  0xTBD (value has to be 0x8000 or greater)
   Extension Name:  public_name_authn
   Recommended:  Y
   Reference:  This document
   Notes:  (none)

9.  References

9.1.  Normative References

   [ECH]      Rescorla, E., Oku, K., Sullivan, N., and C. A. Wood, "TLS
              Encrypted Client Hello", Work in Progress, Internet-Draft,
              draft-ietf-tls-esni-22, 15 September 2024,
              <https://datatracker.ietf.org/doc/html/draft-ietf-tls-
              esni-22>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

9.2.  Informative References

   [RAW]      Wouters, P., Ed., Tschofenig, H., Ed., Gilmore, J.,
              Weiler, S., and T. Kivinen, "Using Raw Public Keys in
              Transport Layer Security (TLS) and Datagram Transport
              Layer Security (DTLS)", RFC 7250, DOI 10.17487/RFC7250,
              June 2014, <https://www.rfc-editor.org/rfc/rfc7250>.

   [RFC9180]  Barnes, R., Bhargavan, K., Lipp, B., and C. Wood, "Hybrid
              Public Key Encryption", RFC 9180, DOI 10.17487/RFC9180,
              February 2022, <https://www.rfc-editor.org/rfc/rfc9180>.

   [RFC9460]  Schwartz, B., Bishop, M., and E. Nygren, "Service Binding
              and Parameter Specification via the DNS (SVCB and HTTPS
              Resource Records)", RFC 9460, DOI 10.17487/RFC9460,
              November 2023, <https://www.rfc-editor.org/rfc/rfc9460>.

   [SVCB]     Schwartz, B., Bishop, M., and E. Nygren, "Service Binding
              and Parameter Specification via the DNS (SVCB and HTTPS
              Resource Records)", RFC 9460, DOI 10.17487/RFC9460,
              November 2023, <https://www.rfc-editor.org/rfc/rfc9460>.

Acknowledgments

   TODO

Author's Address

   Martin Thomson
   Mozilla
   Email: mt@lowentropy.net
